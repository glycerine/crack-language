# Copyright 2010-2011 Google Inc.
# 
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
# 

import crack.io cout, StringWriter, StringReader;
import crack.lang Buffer;
import crack.serial BufferDeserializer, SerialWriter, SerialReader, BUFSIZE;

if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    w.write(1000);
    w.write('test');
    SerialReader r = {StringReader(sw.string())};
    if (r.readUInt() != 1000)
        cout `Failed to write and read uint32\n`;
    
    if (r.readString() != 'test')
        cout `Failed to write and read string\n`;
}

if (true) {
    # test reading from an empty buffer
    BufferDeserializer deser = {Buffer(null, 0)};
    if (deser.readUInt().success)
        cout `FAILED, got success on empty buffer read\n`;
    if (deser.pos != 0)
        cout I`FAILED, got pos update on empty buffer read: pos = 
               $(deser.pos)\n`;
}

if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    w.write(1000);
    BufferDeserializer deser = {sw.string()};
    if (!deser.readUInt().success)
        cout `FAILED getting success from successful readUInt()\n`;
    if (deser.lastUInt != 1000)
        cout I`FAILED getting uint from BufferDeserializer, got \
               $(deser.lastUInt)\n`;
    if (deser.pos != 2)
        cout I`FAILED BufferDeserializer.readUInt() buffer pos update, got 
               $(deser.pos)\n`;
}

# string read underflow.
if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    w.write('ab');
    BufferDeserializer deser = {sw.string()};
    deser.size = 2;
    if (deser.readString().success)
        cout `FAILED got success on empty buffer readString()\n`;
    if (deser.pos)
        cout `FAILED incremented pos on underflowed readString()\n`;
}

if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    w.write('test string');
    BufferDeserializer deser = {sw.string()};
    if (!deser.readString().success)
        cout `FAILED readString()\n`;
    if (deser.lastString != 'test string')
        cout `FAILED readString() value, got $(deser.lastString)\n`;
    if (deser.pos != 12)
        cout `FAILED readString() pos, got $(deser.pos)\n`;
}

if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    
    # do a one byte offset just so we can test float reads
    w.write(0);
    w.write(float32(1.23));
    w.write(float64(4.56));
    
    BufferDeserializer deser = {sw.string()};
    if (!deser.readUInt().success || deser.lastUInt != 0)
        cout I`FAILED reading a zero uint, success = $(deser.success) \
               lastUInt = $(deser.lastUInt)\n`;
    if (!deser.readFloat32().success)
        cout `FAILED reading a float32\n`;
    if (deser.lastFloat32 != 1.23)
        cout I`FAILED reading float32, expected 1.23 got \
               $(deser.lastFloat32)\n`;
    if (!deser.readFloat64().success)
        cout `FAILED reading a float64\n`;
    if (deser.lastFloat64 != 4.56)
        cout I`FAILED reading float64, expected 4.56 got \
               $(deser.lastFloat64)\n`;
    
}

# test for two bugs: terminating single byte uint and float being read from 
# the existing buffer.
if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    
    w.write(1);
    w.write(float32(2));
    w.write(float64(3));
    w.write(0);
    
    SerialReader deser = {StringReader(sw.string())};
    if (deser.readUInt() != 1)
        cout `FAILED reading first byte\n`;
    if (deser.readFloat32() != 2)
        cout `FAILED reading float32\n`;
    if (deser.readFloat64() != 3)
        cout `FAILED reading float64\n`;
    if (deser.readUInt() != 0)
        cout `FAILED reading terminating uint\n`;
}

# read an array of floats large enough to trigger a buffer reload
if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    
    w.write(1);
    for (int i = 0; i < BUFSIZE; ++i)
        w.write(float32(i));
    
    SerialReader deser = {StringReader(sw.string())};
    if (deser.readUInt() != 1)
        cout `FAILED (big array of floats) reading first byte\n`;
    for (int i = 0; i < BUFSIZE; ++i)
        if (int(deser.readFloat32()) != i)
            cout `FAILED (big array of floats) reading value $i\n`;
}

# try an array of float64s
if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    
    w.write(1);
    for (int i = 0; i < BUFSIZE; ++i)
        w.write(float64(i));
    
    SerialReader deser = {StringReader(sw.string())};
    if (deser.readUInt() != 1)
        cout `FAILED (big array of float64s) reading first byte\n`;
    for (int i = 0; i < BUFSIZE; ++i)
        if (int(deser.readFloat64()) != i)
            cout `FAILED (big array of float64s) reading value $i\n`;
}

cout `ok\n`;
