
# line 1 "opt/ini.rl"
// INI file parser
// Copyright 2012 Google Inc.
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
// 
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
// 
// 2/11/2012

import crack.io FStr, cout;
import crack.lang AppendBuffer, InvalidResourceError, Buffer, Formatter,
                  WriteBuffer, Exception, IndexError, KeyError, CString;
import crack.cont.hashmap OrderedHashMap;
import crack.cont.array Array;
import crack.runtime memmove, mmap, munmap, Stat, fopen, PROT_READ,
                       MAP_PRIVATE, stat, fileno, fclose;
import crack.ascii escape;
import crack.sys strerror;
import crack.io.readers PageBufferString, PageBufferReader, PageBuffer;
alias IniMap = OrderedHashMap[String, OrderedHashMap[String, String]];

class IniError {
    String msg;
    uint line, col;

    oper init(String msg, uint line, uint col) :
        msg = msg, 
        line = line, 
        col = col { 
    }

    void formatTo(Formatter fmt) {
        fmt `$msg:$line:$col`;
    }
}

class IniMap : OrderedHashMap[String, OrderedHashMap[String, String]] {
    oper init() { }

    void formatTo(Formatter fmt) {
        for (section :in this) {
            fmt `[$(section.key)]\n`;
            for (vitem :in section.val)
                fmt `$(vitem.key)=$(escape(vitem.val, 32, 255))\n`
        }

    }

    
}

class IniParser {

    uint maxErr = 1;
    Array[IniError] _errors;
    IniMap _resultMap;
    OrderedHashMap[String, String] _sectionMap;

    
# line 64 "lib/crack/ffmt/ini.crk"
Array[uint] _IniParser_actions = [
  0, 1, 2, 1, 5, 1, 6, 1, 
  7, 1, 8, 1, 9, 1, 10, 1, 
  11, 1, 12, 2, 3, 0, 2, 4, 
  3, 2, 7, 8, 2, 8, 2, 3, 
  4, 1, 3, 3, 13, 1, 3, 4, 
  3, 0, 13, 1, 4, 4, 3, 13, 
  1
];

Array[uint] _IniParser_trans_keys = [
  0, 0, 9, 61, 9, 61, 
  0, 92, 0, 92, 34, 
  116, 48, 55, 48, 55, 
  9, 32, 9, 61, 9, 61, 
  10, 13, 0, 92, 0, 
  92, 10, 116, 10, 55, 
  10, 55, 9, 93, 9, 93, 
  0, 93, 0, 93, 9, 
  116, 9, 93, 9, 32, 
  9, 93, 9, 93, 0, 92, 
  9, 61, 9, 61, 9, 
  91, 0
];

Array[uint] _IniParser_key_spans = [
  0, 53, 53, 93, 93, 83, 8, 8, 
  24, 53, 53, 4, 93, 93, 107, 46, 
  46, 85, 85, 94, 94, 108, 85, 24, 
  85, 85, 93, 53, 53, 83
];

Array[uint] _IniParser_index_offsets = [
  0, 0, 54, 108, 202, 296, 380, 389, 
  398, 423, 477, 531, 536, 630, 724, 832, 
  879, 926, 1012, 1098, 1193, 1288, 1397, 1483, 
  1508, 1594, 1680, 1774, 1828, 1882
];

Array[uint] _IniParser_indicies = [
  1, 2, 0, 0, 2, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 1, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 3, 0, 0, 3, 0, 4, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 4, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 3, 
  2, 2, 3, 2, 5, 5, 5, 5, 
  5, 5, 5, 5, 5, 6, 7, 5, 
  5, 7, 5, 5, 5, 5, 5, 5, 
  5, 5, 5, 5, 5, 5, 5, 5, 
  5, 5, 5, 5, 8, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  10, 9, 5, 5, 5, 5, 5, 5, 
  5, 5, 5, 5, 7, 5, 5, 7, 
  5, 5, 5, 5, 5, 5, 5, 5, 
  5, 5, 5, 5, 5, 5, 5, 5, 
  5, 5, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 10, 9, 
  11, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 12, 11, 12, 2, 
  2, 12, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 11, 2, 2, 2, 2, 2, 
  11, 2, 2, 2, 11, 2, 2, 2, 
  2, 2, 2, 2, 11, 2, 2, 2, 
  11, 2, 11, 2, 13, 13, 13, 13, 
  13, 13, 13, 13, 2, 14, 14, 14, 
  14, 14, 14, 14, 14, 2, 15, 16, 
  2, 2, 16, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 15, 2, 18, 
  19, 17, 17, 19, 17, 17, 17, 17, 
  17, 17, 17, 17, 17, 17, 17, 17, 
  17, 17, 17, 17, 17, 17, 18, 17, 
  17, 17, 17, 17, 17, 17, 17, 17, 
  17, 17, 17, 17, 17, 17, 17, 17, 
  17, 17, 17, 17, 17, 17, 17, 17, 
  20, 17, 17, 20, 17, 22, 19, 21, 
  21, 19, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 22, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 20, 21, 
  21, 20, 21, 19, 21, 21, 19, 21, 
  23, 23, 23, 23, 23, 23, 23, 23, 
  23, 24, 25, 23, 23, 25, 23, 23, 
  23, 23, 23, 23, 23, 23, 23, 23, 
  23, 23, 23, 23, 23, 23, 23, 23, 
  26, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 28, 27, 23, 23, 
  23, 23, 23, 23, 23, 23, 23, 23, 
  25, 23, 23, 25, 23, 23, 23, 23, 
  23, 23, 23, 23, 23, 23, 23, 23, 
  23, 23, 23, 23, 23, 23, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 27, 27, 27, 27, 27, 27, 
  27, 27, 28, 27, 19, 21, 21, 19, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 29, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  30, 29, 30, 21, 21, 30, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 29, 21, 
  21, 21, 21, 21, 29, 21, 21, 21, 
  29, 21, 21, 21, 21, 21, 21, 21, 
  29, 21, 21, 21, 29, 21, 29, 21, 
  19, 21, 21, 19, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 31, 31, 
  31, 31, 31, 31, 31, 31, 21, 19, 
  21, 21, 19, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 21, 21, 21, 
  21, 21, 21, 21, 21, 32, 32, 32, 
  32, 32, 32, 32, 32, 21, 1, 2, 
  33, 33, 2, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 1, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 34, 
  33, 33, 34, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 33, 
  0, 33, 0, 33, 1, 2, 33, 33, 
  2, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 1, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 34, 33, 33, 
  34, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 33, 33, 
  33, 33, 33, 33, 33, 33, 0, 33, 
  35, 33, 36, 36, 36, 36, 36, 36, 
  36, 36, 36, 6, 7, 36, 36, 7, 
  36, 36, 36, 36, 36, 36, 36, 36, 
  36, 36, 36, 36, 36, 36, 36, 36, 
  36, 36, 8, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 9, 38, 39, 
  37, 36, 36, 36, 36, 36, 36, 36, 
  36, 36, 5, 7, 36, 36, 7, 36, 
  36, 36, 36, 36, 36, 36, 36, 36, 
  36, 36, 36, 36, 36, 36, 36, 36, 
  36, 9, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 37, 37, 37, 37, 
  37, 37, 37, 37, 9, 38, 39, 37, 
  2, 2, 40, 40, 2, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 2, 
  40, 41, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 42, 41, 42, 
  40, 40, 42, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 2, 41, 43, 40, 40, 40, 
  40, 41, 40, 40, 40, 41, 40, 40, 
  40, 40, 40, 40, 40, 41, 40, 40, 
  40, 41, 40, 41, 40, 2, 2, 40, 
  40, 2, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 2, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 2, 
  40, 43, 40, 44, 45, 2, 2, 45, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 44, 2, 2, 2, 40, 40, 
  2, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 2, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 46, 46, 46, 46, 46, 
  46, 46, 46, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 2, 40, 
  43, 40, 2, 2, 40, 40, 2, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 2, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 47, 47, 47, 47, 47, 47, 47, 
  47, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 40, 40, 40, 40, 
  40, 40, 40, 40, 2, 40, 43, 40, 
  5, 5, 5, 5, 5, 5, 5, 5, 
  5, 48, 49, 5, 5, 49, 5, 5, 
  5, 5, 5, 5, 5, 5, 5, 5, 
  5, 5, 5, 5, 5, 5, 5, 5, 
  50, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 9, 9, 9, 9, 
  9, 9, 9, 9, 10, 9, 51, 45, 
  0, 0, 45, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 51, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 3, 
  0, 0, 3, 0, 52, 45, 2, 2, 
  45, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 52, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 3, 2, 2, 
  3, 2, 15, 16, 0, 0, 16, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 15, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 2, 17, 0, 2, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 53, 0, 0
];

Array[uint] _IniParser_trans_targs = [
  1, 2, 0, 3, 2, 4, 3, 29, 
  3, 4, 5, 4, 6, 7, 4, 8, 
  29, 9, 10, 29, 12, 11, 10, 13, 
  12, 29, 12, 13, 14, 13, 15, 16, 
  13, 18, 19, 27, 20, 20, 21, 26, 
  22, 20, 24, 23, 23, 29, 25, 20, 
  26, 29, 26, 28, 28, 17
];

Array[uint] _IniParser_trans_actions = [
  0, 7, 0, 25, 0, 1, 28, 35, 
  9, 0, 11, 17, 13, 0, 15, 0, 
  31, 0, 7, 22, 25, 0, 0, 1, 
  28, 44, 9, 0, 11, 17, 13, 0, 
  15, 0, 25, 5, 1, 0, 11, 5, 
  0, 17, 13, 5, 0, 19, 0, 15, 
  1, 39, 0, 7, 0, 3
];

uint IniParser_start = 29;
uint IniParser_first_final = 29;
uint IniParser_error = 0;

uint  IniParser_en_main = 29;


# line 223 "opt/ini.rl"


    # parser method ------------------------------------------------------------
    oper init() {}

    String _sliceBuffer(Buffer b, uint start, uint end) {
        return String(b.buffer + uintz(start), end - start, false);
    }

    IniMap parse(Buffer inputString, uint p0, uint pe0) {

        AppendBuffer appendBuf = {128}; // String to hold the value
        _errors = Array[IniError]();      // reset _errors

        // Placeholders for section, key, and value strings
        String sectionName = null, key = null, value = null;

        // column and line counters for error messages
        uint line = 1, col = 1;

        byteptr data = inputString.buffer;
        uint data_size = inputString.size;

        uint p = p0, pe = pe0, okp = 0, eof = data_size;
        uint cs = IniParser_error, lineOffset, marker;
        byte chr;

        
# line 409 "lib/crack/ffmt/ini.crk"
  cs = IniParser_start;

# line 251 "opt/ini.rl"

        
# line 415 "lib/crack/ffmt/ini.crk"
#  ragel flat exec

  bool testEof = false;
  uint _slen = 0;
  uint _trans = 0;
  uint _keys = 0;
  uint _inds = 0;
  uint _acts = 0;
  uint _nacts = 0;
  uint _tempval = 0;
  uint _goto_level = 0;
  uint _resume = 10;
  uint _eof_trans = 15;
  uint _again = 20;
  uint _test_eof = 30;
  uint _out = 40;

  while(true) { # goto loop
    bool _trigger_goto = false;
    if (_goto_level <= 0) {

# noEnd
      if (p == pe){
        _goto_level = _test_eof;
        continue;
      }


# errState != 0
      if (cs == 0){
        _goto_level = _out;
       continue;
      }
    } # _goto_level <= 0

     if (_goto_level <= _resume){
      _keys = cs << 1; // LOCATE_TRANS
      _inds = _IniParser_index_offsets[cs];
      _slen = _IniParser_key_spans[cs];

      if (   _slen > 0 && 
         _IniParser_trans_keys[_keys] <= data[p] && 
         data[p] <= _IniParser_trans_keys[_keys + 1]) 
        _trans = _IniParser_indicies[ _inds + data[p] - _IniParser_trans_keys[_keys] ]; 
      else _trans =_IniParser_indicies[ _inds + _slen ];

    cs = _IniParser_trans_targs[_trans];

    if (_IniParser_trans_actions[_trans] != 0) {
      _acts = _IniParser_trans_actions[_trans];
      _nacts = _IniParser_actions[_acts];
      _acts += 1;

      while (_nacts > 0) {
        _nacts -= 1;
        _acts += 1;
        _tempval = _IniParser_actions[_acts - 1];

     # start action switch
    if (_tempval  == 0) { // FROM_STATE_ACTION_SWITCH
# line 66 "opt/ini.rl" # end of line directive
    
            p = p - 1;
            // ACTION
    }
    else  if (_tempval  == 1) { // FROM_STATE_ACTION_SWITCH
# line 70 "opt/ini.rl" # end of line directive
    
            if (p > okp)
                _errors.append(
                    IniError(
                        FStr() I`Syntax error near \
                                $(_sliceBuffer(inputString, okp, p))`,
                        line,
                        p - lineOffset - 1
                    )
                );
            if (_errors.count() >= maxErr) return _resultMap;
            // ACTION
    }
    else  if (_tempval  == 2) { // FROM_STATE_ACTION_SWITCH
# line 83 "opt/ini.rl" # end of line directive
    
            if (p > okp) {
                String msg;
                if (data[p] == b'=')
                    msg = "Invalid key syntax ";
                else
                    msg = "Invalid value syntax ";
                _errors.append(IniError(msg + _sliceBuffer(inputString, okp, p),
                                        line, 
                                        p - lineOffset - 1
                                        )
                               );
            }
            if (_errors.count() >= maxErr) return _resultMap;
            // ACTION
    }
    else  if (_tempval  == 3) { // FROM_STATE_ACTION_SWITCH
# line 99 "opt/ini.rl" # end of line directive
    
            if (lineOffset < p && data[p] < 32) line += 1;
            lineOffset = p + 1;
            okp = p + 1;
            // ACTION
    }
    else  if (_tempval  == 4) { // FROM_STATE_ACTION_SWITCH
# line 105 "opt/ini.rl" # end of line directive
    
            okp = p + 1;
            // ACTION
    }
    else  if (_tempval  == 5) { // FROM_STATE_ACTION_SWITCH
# line 109 "opt/ini.rl" # end of line directive
    
            if (p == lineOffset) {
                if (_sectionMap != null && sectionName != null) {
                    _resultMap[sectionName] = _sectionMap;
                }
                _sectionMap = null;
                sectionName = null;
                okp = p + 1;
            }
            // ACTION
    }
    else  if (_tempval  == 6) { // FROM_STATE_ACTION_SWITCH
# line 120 "opt/ini.rl" # end of line directive
    
            sectionName = _sliceBuffer(inputString, okp, p);
            _sectionMap = OrderedHashMap[String, String]();
            _resultMap[sectionName] = _sectionMap;
            okp = p + 1;
            // ACTION
    }
    else  if (_tempval  == 7) { // FROM_STATE_ACTION_SWITCH
# line 127 "opt/ini.rl" # end of line directive
    
            if (marker < lineOffset) {
                key = _sliceBuffer(inputString, lineOffset, p);
                marker = p;
            }
            okp = p + 1;
            // ACTION
    }
    else  if (_tempval  == 8) { // FROM_STATE_ACTION_SWITCH
# line 135 "opt/ini.rl" # end of line directive
    
            appendBuf.size = 0;
            okp = p + 1;
            // ACTION
    }
    else  if (_tempval  == 9) { // FROM_STATE_ACTION_SWITCH
# line 140 "opt/ini.rl" # end of line directive
    
            if (p > okp){
              appendBuf.extend(data + uintz(okp), p - okp);
              okp = p;
          }
            // ACTION
    }
    else  if (_tempval  == 10) { // FROM_STATE_ACTION_SWITCH
# line 147 "opt/ini.rl" # end of line directive
    
            okp = p;
            // ACTION
    }
    else  if (_tempval  == 11) { // FROM_STATE_ACTION_SWITCH
# line 151 "opt/ini.rl" # end of line directive
    
            chr = (data[okp] - 48) * 64;
            chr += (data[okp + 1] - 48) * 8;
            chr += (data[okp + 2] - 48);
            appendBuf.append(chr);

            okp = p + 1;
            p = ( p + 1) - 1; //EXEC

            // ACTION
    }
    else  if (_tempval  == 12) { // FROM_STATE_ACTION_SWITCH
# line 161 "opt/ini.rl" # end of line directive
    
            if (p > okp)
                appendBuf.extend(data + uintz(okp), p - okp - 1);
            chr = data[p];
            if (chr == b'"' || chr == b'\\' || chr == b'/')
                appendBuf.append(chr);
            else if (chr == b"b")
                appendBuf.append(b"\b");
            else if (chr == b"n")
                appendBuf.append(b"\n");
            else if (chr == b"f")
                appendBuf.append(b"\f");
            else if (chr == b"r")
                appendBuf.append(b"\r");
            else if (chr == b"t")
                appendBuf.append(b"\t");
            okp = p + 1;
            p = ( p + 1) - 1; //EXEC

            // ACTION
    }
    else  if (_tempval  == 13) { // FROM_STATE_ACTION_SWITCH
# line 181 "opt/ini.rl" # end of line directive
    
            if (p > okp)
                appendBuf.extend(data + uintz(okp), p - okp);
            value = String(appendBuf, 0, appendBuf.size);

            _sectionMap[key] = value;
            okp = p+1;
            // ACTION
    }
# line 629 "lib/crack/ffmt/ini.crk" # end of line directive
    # end action switch
      } # while _nacts
    }

    if (_trigger_goto) continue;
    } # endif 

    if (_goto_level <= _again) {
      if (cs == 0) {
        _goto_level = _out;
        continue;
      }
      p += 1;
      if (p != pe) {
        _goto_level = _resume;
        continue;
      }
    } # _goto_level <= _again

    if (_goto_level <= _test_eof) {
    } # _goto_level <= _test_eof

    if (_goto_level <= _out) break;
    } # endif _goto_level <= out

  # end of execute block
# line 253 "opt/ini.rl"

        return _resultMap;
    }

    IniMap parse(Buffer inputString) {

        _resultMap = IniMap();
        OrderedHashMap[String, String] _sectionMap = null;

        return parse(inputString, 0, inputString.size);
    }

    IniMap parseFile(String fname) {
        Stat statInfo = {};
        n := CString(fname);
        statErrors := stat(n.buffer, statInfo);
        if (!statErrors) {
            mode := "r";
            file := fopen(n.buffer, mode.buffer);

            if (file is null)
                throw InvalidResourceError(FStr() `$fname: $(strerror())`);
            fd := fileno(file);

            data_size := statInfo.st_size;
            tdata := mmap(null, statInfo.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
            data := Buffer(byteptr(tdata), data_size);
            
            if (uintz(tdata) != uintz(0) - 1) {
                parse(data);
                munmap(tdata, data_size);
                fclose(file);
                return _resultMap;
            } else {
                throw InvalidResourceError(FStr() `$fname: $(strerror())`);
            }
        }
        return null;
    }

    void reset() {
        _resultMap = null;
        _sectionMap = null;
        _errors =  null;
    }

    IniMap results() {
        return _resultMap;
    }

    Array[IniError] errors() {
        return _errors;
    }

    bool addSection(IniMap ini, String sectionName) {
        if (ini.get(sectionName, null)) return false;
        ini[sectionName] = OrderedHashMap[String, String]();
        return true;
    }

    void formatTo(Formatter fmt) {
        if (_resultMap is null) {
            fmt.write('null');
        } else {
            for (section :in _resultMap) {
                fmt `[$(section.key)]\n`;
                for (vitem :in section.val)
                    fmt `$(vitem.key)=$(escape(vitem.val, 32, 255))\n`
            }
        }
    }
}

iniParser := IniParser();
