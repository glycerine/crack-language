
import crack.lang AssertionError;
import crack.math abs, min, sqrt;
import crack.exp.g3d INFINITY, isZero, Poly, Sphere, Tri, Vector;
import crack.io cout, FStr;

## Check for a collision between a point and a polygon.
bool checkPointPolygonCollision(Vector position, Vector direction,
                                Poly poly,
                                array[float] distance
                                ) {
   // break the polygon up into triangles
   sides := poly.getSideCount();
   for (int i = 0; i < sides - 2; ++i) {

      // check for intersections with each of them
      Tri tri = {poly.getVertex(0), poly.getVertex(i + 1), 
                 poly.getVertex(i + 2)};
      Vector intersection = {};
      if (tri.intersects(position, direction, intersection, distance))
         return true;
   }

   return false;
}

## Check for a collision between two spheres.
## Returns true if the subject sphere moving in "direction"
## intersects the target sphere.
## direction: a normalized vector that is the direction that
##            the point is moving
## distance: if the ray intersects, this is set to the distance
##           from the position to the point of intersection
bool checkSphereCollision(Sphere subject, Vector direction, Sphere target,
                          array[float] distance
                          ) {
    # first find the distance from the center of the subject to a plane
    # perpendicular to the direction that passes through the center of the
    # target sphere - this is just the dot product of the vector to the center
    distToPlane := (target.center - subject.center) * direction;
 
    # stop now if it's behind us
    if (distToPlane < 0)
        return false;
 
    # calculate the point of intersection with this plane
    intersection := subject.center + direction * distToPlane;
 
    # precalculate the sum of the radii
    minDist := target.radius + subject.radius;
 
    # get the distance between the point of intersection and the center of the 
    # sphere.  If it is greater than the radius of the test sphere plus the
    # radius of the target sphere there is no collision.
    closestDistance := (target.center - intersection).size();
    if (closestDistance > minDist)
        return false;
 
    # we're on a collision path with the sphere.  The actual point of
    # collision will be a point on the direction vector whose distance from
    # the center of the sphere is the sum of the radii, so we can use
    # pythagoras to calculate the distance from this point to the plane.
    planeOffset := sqrt(minDist * minDist - closestDistance * closestDistance);
 
    # the distance to the collision is the distance to the plane minus the
    # distance of the point of collision from the plane.
    distance[0] = distToPlane - planeOffset;
    return true;
}

int cmp(float a, float b, float precision) {
    if (a > b && a - b > precision * a)
        return 1;
    else if (a < b && b - a > precision * b)
        return -1;
    else
        return 0;
}

## Check if the vector defined by org and dir intersects with the plane 
## defined by pointOnPlane and normal.  If it does, returns true and updates 
## intersection (to be the point of intersection) and distance (to be the 
## distance from org to intersection).
bool getPlaneIntersection(Vector org, Vector dir, Vector normal,
                          Vector pointOnPlane,
                          Vector intersection,
                          array[float] distance
                          ) {
   # calculate the dot-product of the normal and the direction
   float dotProduct = dir * normal;

   # if the dot-product is zero, the ray is parallel to the plane and we will
   # get division by zero errors if we proceed.  We know that a parallel ray
   # won't intersect, so we can quit now.
   if (!cmp(dotProduct, 0, 1e-6))
      return false;

   # calculate the distance from the origin of the ray to the point of
   # intersection
   distance[0] = (normal * (pointOnPlane - org)) / dotProduct;

   # if distance is < 0, the intersection is _behind_ the origin in the given
   # direction, so we do not intersect
   if (distance[0] < 0)
      return false;

   # finally, the point of intersection
   intersection.set(org + dir * distance[0]);

   return true;
}

## Get the shortest distance from a point to a line.
float getPointLineDistanceSquared(Vector point, Vector linePoint,
                                  Vector lineVector
                                  ) {

   # we define the point vector as a vector from the point on the line to the
   # target point - this will let us deal with this system as a right
   # triangle
   Vector pointVector = point - linePoint;

   # first calculate the square of the line vector and the dot product of the
   # point vector and the line vector
   float lvSquare = lineVector * lineVector;
   float dotProd = pointVector * lineVector;

   # factoring out the square of the line vector from the dot product gives
   # us the square of the "scalar projection" of the vector to the point onto
   # the line
   float scalarProjSquared = dotProd * dotProd / lvSquare;
   
   # using pythagoras, square of the distance from the point to the line will
   # be the square of the hypotenuse minus the square of the scalar
   # projection
   float result = pointVector * pointVector - scalarProjSquared;

   # it is possible that, due to rounding errors, we can end up with a very
   # small negative value in some cases where the point lies on the line.
   # Deal with this.
   if (result < 0)
      result = 0;

   return result;
}

float compareSquare(float a, float b) {
    # Squares should always be positive, we have to do the "isZero()"
    # checks because of the negative near-zero cases
    if ( !((a >= 0 || isZero(a)) && (b >= 0 || isZero(b))) )
        throw AssertionError(FStr() `Illegal value for squares: $a, $b\n`);
    if (a > 1 || b > 1)
        return a - b;
    else 
        return b - a;
}

bool getLinePointAtDistance(Vector linePoint, Vector lineVector, Vector org,
                            Vector dir,
                            float distSquared,
                            array[float] offset
                            ) {
   # the "hypo vec" (hypotenuse vector) is the vector from the point on the
   # target line to the origin.
   Vector hypoVec = org - linePoint;
   float lineVectorDotSquare = lineVector * lineVector;
   float dirLineVectorDotProd = dir * lineVector;
   float hypoVecLineVectorDotProd = hypoVec * lineVector;

   float a = dir * dir * lineVectorDotSquare - 
             dirLineVectorDotProd * dirLineVectorDotProd;
   float b = 
      2 * (dir * hypoVec) * lineVectorDotSquare - 
      2 * dirLineVectorDotProd * (hypoVec * lineVector);
   float c = (hypoVec * hypoVec) * lineVectorDotSquare - 
      distSquared * lineVectorDotSquare - 
      hypoVecLineVectorDotProd * hypoVecLineVectorDotProd;

   # apply the quadratic formula
   # x = -b +- sqrt( b^2 - 4ac ) / 2a
   float divisor = 2 * a;
   float discriminantSquared = b*b - 4 * a * c;

   // if the square of the discriminant is negative, the square root is
   // undefined and the quadratic has no solution - and there is no point
   // along the subject line that is of the specified distance from the target
   // line.
   if (discriminantSquared < 0)
      return false;

   float discriminant = sqrt(discriminantSquared);
   float root1 = (-b + discriminant) / divisor;
   float root2 = (-b - discriminant) / divisor;
   offset[0] = min(root1, root2);
   return true;
}

## Check for a collision between a sphere and a polygon.
bool checkSpherePolyCollision(Sphere subject, Poly polygon, Vector direction, 
                              array[float] distance
                              ) {
   # calculate the normal of the polygon
   Vector coord0 = polygon.getVertex(0);
   Vector normal = 
      Tri.normal(coord0, polygon.getVertex(1), polygon.getVertex(2));

   # find the point on the sphere that is going to collide with the plane -
   # this will be the point on the surface of the sphere opposite the normal
   # of the plane
   Vector org = subject.center;
   Vector p = org - normal * subject.radius;

   Vector intersection = {};

   # first, see if the sphere is bisected by the plane
   float distToPlane = abs((org - coord0) * normal);
   if (distToPlane < subject.radius) {
        # log this?
   # it's not: see if the sphere is on a path to "touch" the plane
   } else if (getPlaneIntersection(p, direction, normal, coord0, intersection, 
                                   distance)) {
      # divide the polygon up into triangles and see if any of them contain the
      # intersection point
      for (int i = 1; i < polygon.getSideCount() - 1; ++i) {
         Vector coord1 = polygon.getVertex(i);
         Vector coord2 = polygon.getVertex(i + 1);

         if (Tri(coord0, coord1, coord2).contains(intersection))
            return true;
      }

   # it's not.  there will be no collision
   } else {
      return false;
   } 

   # now get the intersection from the midpoint of the sphere with the plane
   if (!getPlaneIntersection(org, direction, normal, coord0, intersection, 
                             distance))
      # the midpoint never intersects - that means that either the sphere is
      # moving away from the plane, or sphere is moving parallel to the plane 
      # while being bisected by it.
      # In either case, we don't care.  We might possibly be interested in
      # the latter case, but in cases like these, we're usually more
      # interested in the point of collision with adjoining polygons.
      return false;

   # find the closest edge of the polygon
   float shortDist = INFINITY;
   float nextDist = 0;
   Vector lastVertex = coord0;
   Vector closeLinePoint, closeLineVec;
   sides := polygon.getSideCount();
   for (int i = 1; i <= sides; ++i) {
      Vector curVertex = i < sides ? polygon.getVertex(i) : coord0;
      Vector edgeVec = curVertex - lastVertex;

      # ignore "broken polygons" with zero length sides
      if (!edgeVec) continue;

      nextDist = 
         getPointLineDistanceSquared(intersection, lastVertex, edgeVec);
      if (compareSquare(nextDist, shortDist) < 0) {
         shortDist = nextDist;
         closeLinePoint = lastVertex;
         closeLineVec = edgeVec;
      }
      lastVertex = curVertex;
   }

   # figure out the point along the trajectory where the sphere collides with
   # the line
   bool intersects =
      getLinePointAtDistance(closeLinePoint, closeLineVec, org, direction, 
                             subject.radius * subject.radius,
                             distance
                             );

   # make sure that 1) we got an intersection and 2) it's not behind us.
   # (because of the plane-bisects-sphere case, the distance to the collision
   # point could be negative)
   if (!intersects || distance[0] < 0)
      return false;

   # we need to determine if the point of the intersection is on the line
   # segment of the edge.  To do this, we just get the dot-product of the
   # vector from the line start point to the center of the sphere at the
   # collision with the line vector - this will be the magnitude of the
   # scalar projection times the magnitude of the line vector, so by dividing
   # out the square of the line vector, we get the scalar projection
   # expressed in terms of units of the line vector.
   Vector colPoint = org + direction * distance[0];
   float pointOnEdge = ((colPoint - closeLinePoint) * closeLineVec) / 
                        (closeLineVec * closeLineVec);
   if (0 <= pointOnEdge && pointOnEdge <= 1)
      return true;
   else
      return false;
}

# XXX ready to write tests of checkSpherePolyCollision