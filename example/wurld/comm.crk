# Copyright 2012 Google Inc.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

import crack.cont.array Array;
import crack.cont.hashmap HashMap;
import crack.exp.g3d Vector;
import crack.functor Functor1;
import crack.io cerr, AppendBufferWriter, Reader, StringWriter;
import crack.lang AppendBuffer, Buffer, WriteBuffer;
import crack.net Address;
import crack.exp.net.facade ConnectionState;
import crack.serial BufferDeserializer, SerialWriter;

@import crack.ann implements, interface;

const uint
    METHOD_SET_VIEW = 1,
    METHOD_ADD_CUBE = 2,
    METHOD_REPORT_POSITION = 3;

@interface WurldInst {
    @abstract void setView(Vector pos, float yaw, float pitch);
    @abstract void addCube(Vector pos);

    ## Reports the position and orientation of a client.
    ## 'id' should be zero when a client is reporting its position to a
    ## server, when this is called on a client the id will be the id of
    ## another client from the perspective of the server.
    @abstract void reportPosition(uint id, Vector pos, Vector orientation);
}

## Communications proxy for a remote WurldInst object.  Calling these methods
## results in a message being sent asynchronously to the remote instance.
class Proxy : Object @implements WurldInst {
    SerialWriter ser;
    uint id;

    oper init(AppendBuffer buf, uint id) : id = id {
        ser = SerialWriter(AppendBufferWriter(buf));
    }

    void __writeVector(Vector vec) {
        ser.write(float32(vec[0]));
        ser.write(float32(vec[1]));
        ser.write(float32(vec[2]));
    }

    void setView(Vector pos, float yaw, float pitch) {
        ser.write(METHOD_SET_VIEW);
        __writeVector(pos);
        ser.write(float32(yaw));
        ser.write(float32(pitch));
    }

    void addCube(Vector pos) {
        ser.write(METHOD_ADD_CUBE);
        __writeVector(pos);
    }

    void reportPosition(uint id, Vector pos, Vector orientation) {
        ser.write(METHOD_REPORT_POSITION);
        ser.write(id);
        __writeVector(pos);
        __writeVector(orientation);
    }
}

## Global variables.
WurldInst inst;
Proxy firstProxy;
HashMap[Address, Proxy] proxies = {};
uint nextIdentifier = 1;

class CommManager : Object @implements Functor1[void, ConnectionState] {
    AppendBuffer outbuf;
    BufferDeserializer deser;
    uint clientId;

    oper init(ConnectionState state, uint clientId) :
        outbuf = state.outbuf,
        deser(state.inbuf),
        clientId = clientId {
    }

    @static CommManager makeConnectionHandler(ConnectionState state) {
        id := nextIdentifier++;
        proxies[state.remoteAddress] = p := Proxy(state.outbuf, id);
        if (!firstProxy)
            firstProxy = p;
        return CommManager(state, id);
    }

    @final Vector __readVector() {
        v := Vector();
        for (int i = 0; i < 3; ++i) {
            if (!deser.readFloat32().success)
                return null;
            v[i] = deser.lastFloat32;
        }
        return v;
    }

    void oper call(ConnectionState state) {
        deser.reset(state.inbuf);
        while (state.inbuf) {

            # get the command
            if (!deser.readUInt().success) {
                cerr `incomplete message in inbuf\n`;
                return;
            }

            cmd := deser.lastUInt;
            if (cmd == METHOD_SET_VIEW) {
                if (deser.getAvailable() < 20)
                    return;
                pos := __readVector();
                float yaw = deser.readFloat32().lastFloat32;
                float pitch = deser.readFloat32().lastFloat32;
                if (inst)
                    inst.setView(pos, yaw, pitch);
                cerr `setting inbuf processed to $(deser.pos)\n`;
                state.inbufProcessed = deser.pos;
            } else if (cmd == METHOD_ADD_CUBE) {
                if (deser.getAvailable() < 12)
                    return;
                pos := __readVector();
                if (inst)
                    inst.addCube(pos);
                state.inbufProcessed = deser.pos;
            } else if (cmd == METHOD_REPORT_POSITION) {
                if (deser.getAvailable() < 25)
                    return;
                uint id = deser.readUInt().lastUInt;
                pos := __readVector();
                orientation := __readVector();

                # if the remote address provided a zero identifier, use the
                # identifier associated with the remote connection
                if (!id)
                    id = clientId;

                if (inst)
                    inst.reportPosition(id, pos, orientation);
                state.inbufProcessed = deser.pos;
            } else {
                cerr `Got illegal comand $cmd from remote endpoint.  Disconnecting.\n`;
                # XXX how to tell the facade to disconnect?
            }
        }
    }
}
